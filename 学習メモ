✅9/25【Next.jsで学ぶReact講座 #14】
イミュータブルや破壊的メソッドを理解しよう！スプレッド構文を使う理由とは！？

##JSの値にはミュータブルとイミュータブルについて
- ミュータブル：変更可能なオブジェクト
- イミュータブル：変更不可能なオブジェクト（推奨✨）

⭐️JSは配列とオブジェクトはミュータブル、文字列はイミュータブル
破壊的メソッドは避けて、イミュータブルなメソッドを使うことが望ましい
そのためにスプレッド構文やmapメソッドを使う

##Reactにおいてもイミュータブルな値を使うことが推奨されている
破壊的メソッドは、再レンダリングが行われないため、Reactのパフォーマンスが悪くなる

  const handleAdd = useCallback(() => {
    setArray((prevArray) => {
      const newArray = prevArray;
      newArray.push(1);
      console.log(newArray === prevArray); //true

      ↑この場合、新しい配列を作成していないため、同じ配列を参照している
      ⭐️newArrayは、prevArrayと同じ配列を参照しているため、Reactは再レンダリングを行わない

      return newArray;
    });
  }, []);

📝someメソッドとは？
配列の中に条件に合致する要素があるかどうかを判定するメソッド


✅9/26【Next.jsで学ぶReact講座 #15】
Custom Hooks（カスタムフック）の使い方、使いどころをマスターしよう！

##Custom Hooks（カスタムフック）とは？
-複数のコンポーネントで同じ処理を行う場合、Custom Hooksを使うことで、処理を共通化できる
-関数名をuse〜とすることで、Hooksとして認識される


✅10/3【Next.jsで学ぶReact講座 #17】
useMemoの使い方、useRouterの使い方

##useMemoとは？
-計算量の多い処理を最適化するためのHooks
-第一引数に計算式、第二引数に依存する値を指定する
  計算⭐︎結果⭐︎をキャッシュする！！
useCallbackとの違い：useCallbackは関数をキャッシュする

  const doubleCount = useMemo(() => {
    return count * 2;
  }, [count]);

  ↑countが変更された場合のみ、再計算される


##useRouterとは？
-Next.jsのHooks
-URLパラメータやクエリパラメータを取得するためのHooks
-Next.jsのページコンポーネント内でのみ使用可能

  const router = useRouter();
  const { id } = router.query;

  ↑URLパラメータを取得する場合、router.queryを使用する

router.pathname：現在のURLのパス名を取得
router.query：クエリパラメータを取得
router.push()：ページ遷移を行う
router.back()：前のページに戻る
router.prefetch()：ページの事前読み込みを行う

などなど色々あるので、公式ドキュメントを参照すると良い📚